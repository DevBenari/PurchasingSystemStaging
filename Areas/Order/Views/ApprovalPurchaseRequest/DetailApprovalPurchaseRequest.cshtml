@{
    ViewData["Title"] = "Detail Approval Purchase Request";
    Layout = "~/Views/Shared/_TopNavbarApprovalPurchaseRequest.cshtml";
}

@using Microsoft.AspNetCore.Identity;
@using PurchasingSystem.Areas.Order.ViewModels;

@{
    var listRole = Context.Session.GetString("ListRole");
    @inject Microsoft.AspNetCore.Identity.SignInManager<ApplicationUser> signInManager

}
@model ApprovalPurchaseRequestViewModel

<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-md-12 bg-white">
            <div class="card-header bg-cyan">
                <h3 class="card-title fw-bold" style="color:#ffffff">@ViewBag.Title</h3>
            </div>

            <form enctype="multipart/form-data" asp-controller="ApprovalPurchaseRequest" asp-action="DetailApprovalPurchaseRequest" method="post" class="form-horizontal">
                <div class="card-body">
                    @if (signInManager.IsSignedIn(User))
                    {
                        <input asp-for="@User.Identity.Name" class="form-control" type="hidden">
                    }
                    @*<input asp-for="Status" value="Belum Disetujui" type="hidden">*@
                    <input type="hidden" asp-for="ApprovalId" />
                    <input type="hidden" asp-for="PurchaseRequestId" />
                    <input type="hidden" asp-for="UserAccessId" />
                    <input type="hidden" asp-for="UserApproveId" />
                    @*Jika dihilangkan tidak berjalan walaupun sudah ditampilkan dengan statement*@
                    <input type="hidden" asp-for="ApprovalTime" />
                    <input type="hidden" asp-for="ApprovalDate" />
                    <input type="hidden" asp-for="ApproveBy" />
                    <input type="hidden" asp-for="QtyTotal" />
                    <input type="hidden" asp-for="GrandTotal" />
                    <input type="hidden" asp-for="Status" id="Status" value=""/>

                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label" asp-for="PurchaseRequestNumber">PR Number</label>
                        <div class="col-sm-10">
                            <input type="text" asp-for="PurchaseRequestNumber" class="form-control form-control-border border-width-2" id="purchaserequestnumber" placeholder="Nomor PR" readonly>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label" asp-for="UserAccessId">
                            Create By
                        </label>
                        <div class="col-sm-10">
                            <select asp-for="UserAccessId" asp-items="@ViewBag.User" class="form-control select2bs4" id="UserAccessId" style="width: 100%;" disabled>
                                <option value="" hidden disabled selected>--Choose User--</option>
                            </select>
                            <span asp-validation-for="UserAccessId" class="error"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label" asp-for="ExpiredDate">Expired Date</label>
                        <div class="col-sm-10">
                            <input asp-for="ExpiredDate" value="@Model.ExpiredDate.ToString("dd MMMM yyyy")" autocomplete="off" class="form-control" disabled>
                            <span asp-validation-for="ExpiredDate" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label" asp-for="Note">Note</label>
                        <div class="col-sm-10">
                            <input asp-for="Note" autocomplete="off" class="form-control" placeholder="Note" disabled>
                            <span asp-validation-for="Note" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label" asp-for="Message">Message</label>
                        <div class="col-sm-10">
                            <input asp-for="Message" autocomplete="off" class="form-control" placeholder="Message">
                            <span asp-validation-for="Message" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Signature</label>
                        <div class="col-sm-10">
                            <button type="button" class="btn btn-primary float-left fw-bold" data-toggle="modal" data-target="#signatureModal" id="btnSignature" value="Signature">
                                Signature
                            </button>
                            <span class="text-danger"></span>
                            @* <div class="col-sm-10">
                                <img src="@Url.Content("~/Signature/" + Model.UserAccessId + ".png")" alt="Signature Image" class="img-thumbnail mt-2" width="100" height="50" />
                                <span class="text-danger"></span>
                            </div> *@
                        </div>
                    </div>

                    <div class="card card-default">
                        <div class="card-header bg-cyan">
                            <h3 class="card-title fw-bold" style="color:#ffffff">Item</h3>
                        </div>
                        <!-- /.card-header -->
                        <div class="card-body">
                            <div class="card-body table-responsive p-0">
                                <table id="tbldetailpr" class="table table-head-fixed text-nowrap table-bordered table-hover table-striped">
                                    <thead>
                                        <tr>
                                            <th class="text-left" style="background-color:#7FB9EE"><div style="color:#ffffff">No</div></th>
                                            <th class="text-left" style="background-color:#7FB9EE"><div style="color:#ffffff">Product Number</div></th>
                                            <th class="text-left" style="background-color:#7FB9EE"><div style="color:#ffffff">Product Name</div></th>
                                            <th class="text-left" style="background-color:#7FB9EE"><div style="color:#ffffff">Supplier</div></th>
                                            <th class="text-left" style="background-color:#7FB9EE"><div style="color:#ffffff">Measure</div></th>
                                            <th class="text-center" style="background-color:#7FB9EE"><div style="color:#ffffff">Qty</div></th>
                                            <th class="text-right" style="background-color:#7FB9EE"><div style="color:#ffffff">Price</div></th>
                                            <th class="text-right" style="background-color:#7FB9EE"><div style="color:#ffffff">Discount</div></th>
                                            <th class="text-right" style="background-color:#7FB9EE"><div style="color:#ffffff">Sub Total</div></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < Model.PurchaseRequestDetails.Count; i++)
                                        {
                                            var no = (Model.PurchaseRequestDetails.Count - Model.PurchaseRequestDetails.Count) + i + 1;

                                            <tr id="R$@no" class="detailProduct">
                                                <td class="row-index text-center"><p>@no</p></td>
                                                <td class="text-left row-productNumber"><input class="detkodeproduk" asp-for="@Model.PurchaseRequestDetails[i].ProductNumber" type="hidden" value="@Model.PurchaseRequestDetails[i].ProductNumber">@Model.PurchaseRequestDetails[i].ProductNumber</td>
                                                <td class="text-left row-productName"><input class="detnamaproduk" asp-for="@Model.PurchaseRequestDetails[i].ProductName" type="hidden" value="@Model.PurchaseRequestDetails[i].ProductName">@Model.PurchaseRequestDetails[i].ProductName</td>
                                                <td class="text-left"><input class="detsupplier" asp-for="@Model.PurchaseRequestDetails[i].Supplier" type="hidden" value="@Model.PurchaseRequestDetails[i].Supplier">@Model.PurchaseRequestDetails[i].Supplier</td>
                                                <td class="text-left"><input class="detsatuan" asp-for="@Model.PurchaseRequestDetails[i].Measurement" type="hidden" value="@Model.PurchaseRequestDetails[i].Measurement">@Model.PurchaseRequestDetails[i].Measurement</td>
                                                <td class="text-center row-qty"><input class="text-center detqty" asp-for="@Model.PurchaseRequestDetails[i].Qty" type="hidden" value="@Model.PurchaseRequestDetails[i].Qty">@Model.PurchaseRequestDetails[i].Qty</td>
                                                <td class="text-right"><input class="detprice" asp-for="@Model.PurchaseRequestDetails[i].Price" type="hidden" value="@Model.PurchaseRequestDetails[i].Price">@Model.PurchaseRequestDetails[i].Price.ToString("C0", new System.Globalization.CultureInfo("id-ID"))</td>
                                                <td class="text-right"><input class="detdiskon" asp-for="@Model.PurchaseRequestDetails[i].Discount" type="hidden" value="@Model.PurchaseRequestDetails[i].Discount">@Model.PurchaseRequestDetails[i].Discount</td>
                                                <td class="text-right row-total"><input class="detsubtotal" asp-for="@Model.PurchaseRequestDetails[i].SubTotal" type="hidden" value="@Model.PurchaseRequestDetails[i].SubTotal">@Model.PurchaseRequestDetails[i].SubTotal.ToString("C0", new System.Globalization.CultureInfo("id-ID"))</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <th colspan="5" class="text-right">Total Qty</th>
                                            <td id="producttotalqty" class="text-left productTotalQty">@Model.QtyTotal</td>
                                            <th colspan="2" class="text-right">Grand Total</th>
                                            <td id="productgrandtotal" class="text-right productGrandTotal">@Math.Truncate(@Model.GrandTotal).ToString("C0", new System.Globalization.CultureInfo("id-ID"))</td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>
                    <!-- start button footer -->
                    <div class="card card-orange">
                        <div class="card-body">
                            @if (Model.ApprovalStatusUser == "User1" && Model.Status == "Waiting Approval" && Model.UserApprove == User.Identity.Name)
                            {
                                @if (!string.IsNullOrEmpty(listRole))
                                {
                                    var roles = listRole.Split(',');
                                    if (roles.Contains("UpdateApprovalQtyDifference"))
                                    {
                                        if (ViewBag.Signature)
                                        {
                                            <button type="submit" class="btn btn-primary bg-indigo float-left fw-bold" id="btnapprove" value="Approve"><div style="color:#ffffff">Approve</div></button>
                                            <button type="submit" class="btn btn-primary bg-danger float-left fw-bold" id="btnreject" value="Reject"><div style="color:#ffffff">Reject</div></button>
                                        }
                                    }
                                }
                                <div class="btn btn-default" data-href="@Url.Action("Index", "ApprovalPurchaseRequest", new { area = "Order" })">Cancel</div>
                            }
                            else if (Model.ApprovalStatusUser == "User2" && Model.Status == "User1Approve" && Model.UserApprove == User.Identity.Name)
                            {
                                @if (!string.IsNullOrEmpty(listRole))
                                {
                                    var roles = listRole.Split(',');
                                    if (roles.Contains("UpdateApprovalQtyDifference"))
                                    {
                                        if (ViewBag.Signature)
                                        {
                                            <button type="submit" class="btn btn-primary bg-indigo float-left fw-bold" id="btnapprove" value="Approve"><div style="color:#ffffff">Approve</div></button>
                                            <button type="submit" class="btn btn-primary bg-danger float-left fw-bold" id="btnreject" value="Reject"><div style="color:#ffffff">Reject</div></button>
                                        }
                                    }
                                }
                                <div class="btn btn-default" data-href="@Url.Action("Index", "ApprovalPurchaseRequest", new { area = "Order" })">Cancel</div>
                            }
                            else if (Model.ApprovalStatusUser == "User3" && Model.Status == "User2Approve" && Model.UserApprove == User.Identity.Name)
                            {
                                @if (!string.IsNullOrEmpty(listRole))
                                {
                                    var roles = listRole.Split(',');
                                    if (roles.Contains("UpdateApprovalQtyDifference"))
                                    {
                                        if (ViewBag.Signature)
                                        {
                                            <button type="submit" class="btn btn-primary bg-indigo float-left fw-bold" id="btnapprove" value="Approve"><div style="color:#ffffff">Approve</div></button>
                                            <button type="submit" class="btn btn-primary bg-danger float-left fw-bold" id="btnreject" value="Reject"><div style="color:#ffffff">Reject</div></button>
                                        }
                                    }
                                }
                                <div class="btn btn-default" data-href="@Url.Action("Index", "ApprovalPurchaseRequest", new { area = "Order" })">Cancel</div>
                            }
                            else
                            {                                
                                <div class="btn btn-default" data-href="@Url.Action("Index", "ApprovalPurchaseRequest", new { area = "Order" })">Cancel</div>
                            }
                        </div>
                    </div>
                    <!-- /.end button footer -->
                </div>
            </form>
        </div>
        @if (TempData["WarningMessage"] != null)
        {
            <script type="text/javascript">
                window.onload = function () {
                    swal("Gagal Simpan", '@TempData["WarningMessage"]', "warning");
                };
            </script>
        }
    </div>
    <!-- /.row -->
    <!-- /.Pop up -->
    <!-- Modal untuk Signature -->
    <div class="modal fade" id="signatureModal" tabindex="-1" role="dialog" aria-labelledby="signatureModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="signatureModalLabel">Signature</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="signatureForm" method="post" action="@Url.Action("CreateSignature", "ApprovalPurchaseRequest")" class="needs-validation" novalidate="">
                        <!-- Input tersembunyi untuk ApprovalId -->
                        <input type="hidden" name="ApprovalId" value="@Model.ApprovalId" />
                        <input type="hidden" name="UserAccessId" value="@Model.UserAccessId" />
                        <input type="hidden" name="SignatureData" id="signatureData" />

                        <!-- Jika tanda tangan sudah ada, tampilkan gambar tanda tangan -->
                        @if (ViewBag.Signature != null && ViewBag.Signature)
                        {
                            <div class="text-center" id="signatureImageContainer">
                                <img src="@Url.Content($"~/Signature/{ViewBag.UserIdLog}.png")" alt="Signature" width="400" height="200" />
                                <br />
                                <button type="button" id="clearSignature" class="btn btn-danger mt-2">Clear</button>
                            </div>
                        }
                        <!-- Jika tanda tangan belum ada, tampilkan canvas untuk menggambar tanda tangan baru -->
                        <div id="signatureCanvasContainer" style="display:@(ViewBag.Signature == null || !ViewBag.Signature ? "block" : "none");">
                            <canvas id="signatureCanvas" width="400" height="200" class="img-thumbnail mt-2" style="border:1px solid #bcc1c6;"></canvas>
                            <br />
                            <button type="button" id="clearCanvas" class="btn btn-danger">Clear</button>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Simpan</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- End Modal Signature -->
</section>

<!-- /.content -->
@section Scripts {
    <script>
        $(function () {
            //Initialize Select2 Elements
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })
        })
       // $('#toolAction').tooltip({ animation: true });
    </script>

    <script>
        $(document).ready(function () {
            jQuery('button[type=submit]').click(function (event) {
                if (this.value == "Approve") {
                    $('#Status').val("Approve");                    
                }
                if (this.value == "Reject") {
                    $('#Status').val("Reject");
                    
                }               
            });            
        });
    </script>

    <!-- /.Pop up -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const canvas = document.getElementById('signatureCanvas');
            const ctx = canvas.getContext('2d');
            let drawing = false;

            // Function to start drawing
            const startDrawing = (e) => {
                drawing = true;
                ctx.beginPath();
                ctx.moveTo(e.offsetX, e.offsetY);
            };

            // Function to draw on canvas
            const draw = (e) => {
                if (drawing) {
                    ctx.lineTo(e.offsetX, e.offsetY);
                    ctx.stroke();
                }
            };

            // Function to stop drawing
            const stopDrawing = () => drawing = false;

            // Event listeners for drawing on canvas
            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mouseleave', stopDrawing);

            // Clear the canvas when clear button is clicked
            document.getElementById('clearCanvas').addEventListener('click', () => ctx.clearRect(0, 0, canvas.width, canvas.height));

            // On form submit, add signature data (canvas image) to the hidden input
            document.getElementById('signatureForm').addEventListener('submit', function (e) {
                // Get the canvas image data (Base64 string)
                const signatureData = canvas.toDataURL('image/png');
                document.getElementById('signatureData').value = signatureData;
            });
        });

    </script>

    <script>
        // Menangani tombol Clear Signature
        document.getElementById('clearSignature')?.addEventListener('click', function () {
            // Menghapus gambar tanda tangan yang ada
            var signatureImg = document.querySelector('#signatureImageContainer img');
            if (signatureImg) {
                signatureImg.style.display = 'none';  // Menyembunyikan gambar
            } 
            var clearSignatureBtn = document.getElementById('clearSignature');
            clearSignatureBtn.style.display = 'none';

            // Menampilkan canvas untuk menggambar tanda tangan baru
            var canvasContainer = document.getElementById('signatureCanvasContainer');
            canvasContainer.style.display = 'block';  // Menampilkan canvas

            // Menghapus data signature di hidden input
            document.getElementById('signatureData').value = '';
        });

        // Menangani tombol Clear untuk Canvas
        document.getElementById('clearCanvas')?.addEventListener('click', function () {
            var canvas = document.getElementById('signatureCanvas');
            var context = canvas.getContext('2d');
            context.clearRect(0, 0, canvas.width, canvas.height);  // Clear canvas

            // Menghapus data signature di hidden input
            document.getElementById('signatureData').value = '';
        });
    </script>

}