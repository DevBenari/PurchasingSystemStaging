@{
    ViewData["Title"] = "Add Role User";
    Layout = "~/Views/Shared/_TopNavbarAdministrator.cshtml";
}

@using Microsoft.AspNetCore.Identity;
@using PurchasingSystem.Models;

@inject Microsoft.AspNetCore.Identity.SignInManager<ApplicationUser> signInManager
@model IEnumerable<dynamic>

<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-12">
            <div class="card card-cyan">
                <div class="card-header">
                    <h3 class="card-title" style="color:#ffffff"><b>@ViewBag.Title</b></h3>
                    <div class="card-tools"></div>
                </div>
                <!-- Form Role Creation -->
                @{
                    var user = await signInManager.UserManager.FindByNameAsync(User.Identity.Name);
                }
                @if (user?.Email == "superadmin@admin.com")
                {
                    <form id="createRoleForm" asp-controller="RoleUser" asp-action="CreateRoleUserNavbar" method="post">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="card">
                                    <div class="card-header">
                                        <div class="card-tools">
                                            <button type="submit" class="btn btn-primary bg-indigo float-left fw-bold">
                                                Refresh Roles
                                            </button>
                                        </div>
                                    </div>
                                    <!-- /.card-header -->
                                </div>
                                <!-- /.card -->
                            </div>
                        </div>
                    </form>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card card-widget widget-user">
                                <div class="card-header">
                                    <div class="widget-user-header">
                                        <h1 class="widget-user-username"><b>Seed Role User</b></h1>
                                    </div>
                                </div>
                                <!-- /.card-header -->
                            </div>
                            <!-- /.card -->
                        </div>
                    </div>
                }

                @*<div class="row">
                <div class="col-12">
                <div class="card card-widget widget-user">
                <div class="widget-user-header bg-indigo">
                <h1 class="widget-user-username"><b>Seed Role User</b></h1>
                </div>
                </div>
                </div>
                </div>*@
                <!-- Card Body for Role Menus -->
                <div class="row">
                    <div class="col-md-4 bg-white">
                        <div class="col-md-12" id="div0">
                            <a href="#" class="btn bg-info btn-block mb-3">All User</a>
                            <!-- DIRECT CHAT -->
                            <div class="card direct-chat direct-chat-primary">
                                <div class="card-header">
                                    <h3 class="card-title">
                                        <form action="#" method="post">
                                            <div class="input-group">
                                                <input type="text" id="searchInput" name="message" placeholder="Search User" class="form-control">
                                                <span class="input-group-append">
                                                    <!-- Tombol Search dihapus -->
                                                </span>
                                            </div>
                                        </form>
                                    </h3>
                                    <div class="card-tools">
                                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                            <i class="fas fa-minus"></i>
                                        </button>
                                    </div>
                                </div>
                                <!-- /.card-header -->
                                <div class="card-body">
                                    <!-- Conversations are loaded here -->
                                    <div class="direct-chat-messages" style="height:777px;">
                                        <ul class="contacts-list" id="userList">
                                        </ul>
                                        <!-- /.contacts-list -->
                                    </div>
                                    <!-- /.direct-chat-pane -->
                                </div>
                                <!-- /.card-body -->
                                <div class="card-footer">
                                </div>
                            </div>
                            <!-- /.card -->
                        </div>
                    </div>

                    <div class="col-md-4 bg-white">
                        <div class="col-md-12" id="div1">
                            <a href="#" class="btn bg-info btn-block mb-3">All Role Menu</a>
                            <div class="card">
                                <div class="card-header">
                                    <h3 class="card-title">
                                        <div class="input-group">
                                            <input type="text" id="searchMenu" name="message" placeholder="Search Menu" class="form-control">
                                            <span class="input-group-append">
                                                <!-- Tombol Search dihapus -->
                                            </span>
                                        </div>
                                    </h3>
                                    <div class="card-tools">
                                        <button type="button" class="btn btn-success float-left fw-bold" id="moveButton">
                                            Move All &rarr;
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body p-0 direct-chat-messages" style="height:800px;">
                                    <ul class="nav nav-pills flex-column" id="folderList">
                                    </ul>
                                </div>
                                <!-- /.card-body -->
                            </div>
                            <!-- /.card -->
                        </div>
                    </div>

                    <div class="col-md-4 bg-white">
                        <div class="col-md-12" id="div2">
                            <a href="#" class="btn btn-primary btn-block mb-3">Create Role User</a>
                            <div class="card">
                                <form enctype="multipart/form-data" asp-controller="RoleUser" asp-action="CreateRoleUser" method="post">
                                    <div class="card-header">
                                        <h3 class="card-title" id="menuTitle">Menu</h3>
                                        <input type="hidden" name="DepartemenId" id="DepartemenId">
                                        <div class="card-tools">
                                            <button type="submit" class="btn btn-primary bg-indigo float-left fw-bold">
                                                Update Role
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body p-0 direct-chat-messages" style="height:800px;">
                                        <ul class="nav nav-pills flex-column" id="newFolderList"></ul>
                                    </div>
                                    <!-- /.card-body -->
                                </form>
                            </div>
                            <!-- /.card -->
                        </div>
                    </div>
                </div>
                <!-- /.row -->
            </div>
        </div>
    </div>
</section>
<!-- /.content -->
@if (TempData["SuccessMessage"] != null)
{
    <script type="text/javascript">
        window.onload = function () {
            swal("Success", '@TempData["SuccessMessage"]', "success");
        };
    </script>
}
@if (TempData["WarningMessage"] != null)
{
    <script type="text/javascript">
        window.onload = function () {
            swal("Failed", '@TempData["WarningMessage"]', "warning");
        };
    </script>
}
<!-- Script Section -->
<script src="~/admin/dist/js/signalr.min.js"></script>
<script>
    function initSignalR() {
        var connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();

        connection.start()
            .then(() => console.log("SignalR connected."))
            .catch(err => console.error(err.toString()));

        connection.on("UpdateDataCount", () => roleData());
    }


    function moveToDiv2(itemId, folderCurrentConcurrencyStamp) {
        const newList = document.getElementById('div1').querySelector(`#${folderCurrentConcurrencyStamp}`);
        const originalList = document.getElementById('div2').querySelector(`#${folderCurrentConcurrencyStamp}`);
        console.log("ini item = " + itemId);
        const newFolderList = document.getElementById('newFolderList');
        const folderList = document.getElementById('folderList');

        // Membuat elemen <li> baru untuk folder, jika belum ada
        const newListItem = document.createElement('li');
        newListItem.classList.add('nav-item', 'active');
        newListItem.id = 'inboxItem';
        newListItem.setAttribute('name', folderCurrentConcurrencyStamp);
        newListItem.innerHTML = `
                <a href="#" class="nav-link" onclick="toggleSubFolder('${folderCurrentConcurrencyStamp}')">
                    ${folderCurrentConcurrencyStamp}
                    <span class="float-right" id="inboxIcon"><i class="fas fa-plus" onclick="myCustomFunction('${folderCurrentConcurrencyStamp}')"></i></span>
                </a>
                <ul class="nav nav-pills flex-column ml-3 collapse show" id="${folderCurrentConcurrencyStamp}">
                </ul>
            `;

        const menuTitle = document.getElementById('menuTitle');
        if (menuTitle && menuTitle.textContent.trim() !== "") {
            if (!newList) {
                folderList.insertBefore(newListItem, folderList.firstChild);
                console.log("ini 1 = " + itemId);
            } else if (!originalList) {
                newFolderList.insertBefore(newListItem, newFolderList.firstChild);
                console.log("ini 2 = " + itemId);
            }
        } else {
            alert("User Belum Dipilih.");
        }
        moveToDiv1(itemId, folderCurrentConcurrencyStamp)
        changeIconsToX();
    }


    function moveToDiv1(itemId, folderCurrentConcurrencyStamp) {
        const item = document.getElementById(itemId);
        const newList = document.getElementById('div1').querySelector(`#${folderCurrentConcurrencyStamp}`);
        const originalList = document.getElementById('div2').querySelector(`#${folderCurrentConcurrencyStamp}`);


        const menuTitle = document.getElementById('menuTitle');
        if (menuTitle && menuTitle.textContent.trim() !== "") {
            if (originalList.contains(item)) {
                newList.appendChild(item);
            } else {
                originalList.appendChild(item);
            }
        }
    }

    function roleData(Email, NameUser) {
        $.ajax({
            url: '@Url.Action("LoadRoles", "RoleUser")',
            method: 'GET',
            data: { Email: Email },
            success: function (data) {
                $('#folderList').empty();
                $('#newFolderList').empty();

                document.getElementById("menuTitle").textContent = NameUser;
                document.getElementById("DepartemenId").value = Email;

                let folderContent = '';  // Menyimpan konten folderList
                let folderArrayBody = '';  // Menyimpan list item untuk setiap folder
                let folderCurrentConcurrencyStamp = ''; // Menyimpan concurrencyStamp sebelumnya

                let newFolderContent = '';  // Menyimpan konten newFolderList
                let newFolderArrayBody = '';  // Menyimpan list item untuk setiap folder
                let newFolderCurrentConcurrencyStamp = ''; // Menyimpan concurrencyStamp sebelumnya


                // Iterasi untuk memproses rolesForDepartment dan mengelompokkan berdasarkan concurrencyStamp
                $.each(data.rolesForDepartment, function (index, role) {

                    if (folderCurrentConcurrencyStamp === '') {
                        // Pertama kali set nilai concurrencyStamp
                        folderCurrentConcurrencyStamp = role.concurrencyStamp;
                    } else if (role.concurrencyStamp !== folderCurrentConcurrencyStamp) {
                        // Jika concurrencyStamp berubah, buat folder baru untuk grup sebelumnya
                        folderContent += `
                                        <li class="nav-item active" id="inboxItem" name="${folderCurrentConcurrencyStamp}">
                                            <a href="#" class="nav-link" onclick="toggleSubFolder('${folderCurrentConcurrencyStamp}')">
                                                ${folderCurrentConcurrencyStamp}
                                                <span class="float-right" id="inboxIcon"><i class="fas fa-plus" onclick="myCustomFunction('${folderCurrentConcurrencyStamp}')"></i></span>
                                            </a>
                                            <ul class="nav nav-pills flex-column ml-3 collapse" id="${folderCurrentConcurrencyStamp}">
                                                ${folderArrayBody}
                                            </ul>
                                        </li>
                                    `;
                        // Reset arrayBody untuk grup berikutnya
                        folderArrayBody = '';
                        folderCurrentConcurrencyStamp = role.concurrencyStamp;  // Update concurrencyStamp untuk grup berikutnya
                    }

                    folderArrayBody += `
                                    <li class="nav-item" id="${role.name}">
                                        <input type="hidden" name="RoleId" value="${role.id}">
                                        <a href="#" class="nav-link" onclick="moveToDiv2('${role.name}','${role.concurrencyStamp}')">
                                            <i class="fas fa-inbox"></i> ${role.name}
                                            <span class="float-right" id="inboxIcon"></span>
                                        </a>
                                    </li>
                                `;
                });

                if (folderArrayBody !== '') {
                    folderContent += `
                                    <li class="nav-item active" id="inboxItem" name="${folderCurrentConcurrencyStamp}">
                                        <a href="#" class="nav-link" onclick="toggleSubFolder('${folderCurrentConcurrencyStamp}')">
                                            ${folderCurrentConcurrencyStamp}
                                            <span class="float-right" id="inboxIcon"><i class="fas fa-plus" onclick="myCustomFunction('${folderCurrentConcurrencyStamp}')"></i></span>
                                        </a>
                                        <ul class="nav nav-pills flex-column ml-3 collapse" id="${folderCurrentConcurrencyStamp}">
                                            ${folderArrayBody}
                                        </ul>
                                    </li>
                                `;
                }
                $('#folderList').append(folderContent);

                // User
                $.each(data.rolesNotForDepartment, function (index, role) {

                    if (newFolderCurrentConcurrencyStamp === '') {
                        newFolderCurrentConcurrencyStamp = role.concurrencyStamp;
                    } else if (role.concurrencyStamp !== newFolderCurrentConcurrencyStamp) {
                        // Jika concurrencyStamp berubah, buat folder baru untuk grup sebelumnya
                        newFolderContent += `
                                        <li class="nav-item active" id="inboxItem" name="${newFolderCurrentConcurrencyStamp}">
                                            <a href="#" class="nav-link" onclick="toggleSubFolder('${newFolderCurrentConcurrencyStamp}')">
                                                ${newFolderCurrentConcurrencyStamp}
                                                <span class="float-right" id="inboxIcon"><i class="fas fa-plus" onclick="myCustomFunction('${newFolderCurrentConcurrencyStamp}')"></i></span>
                                            </a>
                                            <ul class="nav nav-pills flex-column ml-3 collapse" id="${newFolderCurrentConcurrencyStamp}">
                                                ${newFolderArrayBody}
                                            </ul>
                                        </li>
                                    `;
                        // Reset arrayBody untuk grup berikutnya
                        newFolderArrayBody = '';
                        newFolderCurrentConcurrencyStamp = role.concurrencyStamp;  // Update concurrencyStamp untuk grup berikutnya
                    }

                    newFolderArrayBody += `
                                    <li class="nav-item" id="${role.name}">
                                        <input type="hidden" name="RoleId" value="${role.id}">
                                        <a href="#" class="nav-link" onclick="moveToDiv2('${role.name}','${role.concurrencyStamp}')">
                                            <i class="fas fa-inbox"></i> ${role.name}
                                            <span class="float-right" id="inboxIcon"></span>
                                        </a>
                                    </li>
                                `;
                });

                if (newFolderArrayBody !== '') {
                    newFolderContent += `
                                    <li class="nav-item active" id="inboxItem" name="${newFolderCurrentConcurrencyStamp}">
                                        <a href="#" class="nav-link" onclick="toggleSubFolder('${newFolderCurrentConcurrencyStamp}')">
                                            ${newFolderCurrentConcurrencyStamp}
                                            <span class="float-right" id="inboxIcon"><i class="fas fa-plus" onclick="myCustomFunction('${newFolderCurrentConcurrencyStamp}')"></i></span>
                                        </a>
                                        <ul class="nav nav-pills flex-column ml-3 collapse" id="${newFolderCurrentConcurrencyStamp}">
                                            ${newFolderArrayBody}
                                        </ul>
                                    </li>
                                `;
                }

                $('#newFolderList').append(newFolderContent);
                changeIconsToX();
            },
            error: function (xhr, status, error) {
                console.error('Error getting roles:', error);
            }
        });
    }

    function userData() {
        $.ajax({
            url: '@Url.Action("LoadUser", "RoleUser")',
            method: 'GET',
            success: function (data) {
                $('#userList').empty();
                $.each(data, function (index, user) {
                    var foto = user.foto ? user.foto : 'user.jpg';
                    $('#userList').append(`
                                <li style="background-color: #347FC4; cursor: pointer;">
                                    <a href="#">
                                        <img class="contacts-list-img" src="/UserPhoto/${foto}" alt="User Avatar">
                                        <input type="hidden" name="nmUser" value="${user.fullName}" />
                                        <input type="hidden" name="kdUser" value="${user.email}" />
                                        <div class="contacts-list-info">
                                            <span class="contacts-list-name">
                                                ${user.fullName}
                                            </span>
                                        </div>
                                    </a>
                                </li>
                            `);
                });

                $('#userList').on('click', 'li', function () {
                    // Hapus kelas aktif dari semua li
                    $('#userList li').css('background-color', '#347FC4'); // Reset warna latar belakang
                    $(this).css('background-color', '#7FB9EE'); // Ubah warna latar belakang yang diklik

                    var selectedUserCode = $(this).find('input[name="kdUser"]').val();
                    var nmUser = $(this).find('input[name="nmUser"]').val();

                    roleData(selectedUserCode, nmUser); // Panggil fungsi roleData dengan kode user yang dipilih
                });
            },
            error: function (xhr, status, error) {
                console.error('Error loading departments:', error);
            }
        });
    }


    function submitRoleForm(form) {
        var formData = form.serialize();

        $.ajax({
            type: 'POST',
            url: form.attr('action'),
            data: formData,
            success: function (response) {
                if (response.success) {
                    alert('Role created successfully!');
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function (xhr, status, error) {
                alert('An error occurred: ' + error);
            }
        });
    }

    function toggleSubFolder(folderId) {
        const div1Item = document.getElementById('div1').querySelector(`#${folderId}`);
        const div2Item = document.getElementById('div2').querySelector(`#${folderId}`);

        if (div1Item) {
            $(div1Item).collapse('toggle');
        }

        if (div2Item) {
            $(div2Item).collapse('toggle');
        }
    }

    function myCustomFunction(folderId) {
        const folderItems = document.querySelectorAll(`#folderList #${folderId} li`);
        const newFolderListUl = document.querySelector(`#newFolderList #${folderId}`);
        const newFolderItems = document.querySelectorAll(`#newFolderList #${folderId} li`);
        const folderListUl = document.querySelector(`#folderList #${folderId}`);

        const folderList = document.getElementById('folderList');
        const newFolderList = document.getElementById('newFolderList');

        // Ambil elemen li yang memiliki atribut name sesuai dengan folderId di kedua list
        const folderItem = document.querySelector(`#folderList li[name="${folderId}"]`);
        const newFolderItem = document.querySelector(`#newFolderList li[name="${folderId}"]`);


        const menuTitle = document.getElementById('menuTitle');
        if (menuTitle && menuTitle.textContent.trim() !== "") {
            if (folderItem) {
                console.log("Folder item ditemukan di folderList:", folderItem);
                console.log("Pindahkan items dari folderList ke newFolderList");

                if (newFolderListUl) {
                    folderItems.forEach(item => {
                        console.log("Menambahkan item ke newFolderList:", item);
                        newFolderListUl.appendChild(item); // Pindahkan item dari folderList ke newFolderListUl
                    });
                    folderItem.remove(); // Hapus folderItem dari folderList
                    console.log("Folder item dihapus dari folderList");
                } else {
                    console.log("newFolderListUl tidak ditemukan, memasukkan folderItem ke newFolderList");
                    newFolderList.insertBefore(folderItem, newFolderList.firstChild); // Pindahkan ke newFolderList
                }

                // Jika newFolderItem ditemukan di newFolderList
            } else if (newFolderItem) {
                console.log("New folder item ditemukan di newFolderList:", newFolderItem);
                console.log("Pindahkan items dari newFolderList kembali ke folderList");

                if (folderListUl) {
                    newFolderItems.forEach(item => {
                        console.log("Menambahkan item ke folderList:", item);
                        folderListUl.appendChild(item); // Pindahkan item dari newFolderList kembali ke folderList
                    });
                    newFolderItem.remove(); // Hapus newFolderItem dari newFolderList
                    console.log("New folder item dihapus dari newFolderList");
                } else {
                    console.log("folderListUl tidak ditemukan, memasukkan newFolderItem ke folderList");
                    folderList.insertBefore(newFolderItem, folderList.firstChild); // Pindahkan ke folderList
                }
            } else {
                console.log('Elemen folderItem dan newFolderItem tidak ditemukan');
            }
        } else {
            alert("Sorry, please select a user first !!!");
        }

        changeIconsToX();
    }

    function changeIconsToX() {
        const icons = document.querySelectorAll('#newFolderList i.fas.fa-plus');
        const iconsNew = document.querySelectorAll('#folderList i.fas.fa-times');

        icons.forEach(icon => {
            icon.className = 'fas fa-times';
        });
        iconsNew.forEach(icon => {
            icon.className = 'fas fa-plus';
        });
    }


    $(document).ready(function () {
        initSignalR();
        roleData();
        userData();

        $('#createRoleForm').submit(function (e) {
            e.preventDefault(); // Mencegah form dari pengiriman standar
            submitRoleForm($(this));
        });

        $('#searchInput').on('input', function () {
            var searchTerm = $(this).val().toLowerCase(); // Ambil nilai input dan ubah menjadi lowercase
            $('#userList li').each(function () {
                var userName = $(this).find('.contacts-list-name').text().toLowerCase(); // Ambil nama pengguna
                if (userName.includes(searchTerm)) {
                    $(this).show(); // Tampilkan elemen jika cocok
                } else {
                    $(this).hide(); // Sembunyikan elemen jika tidak cocok
                }
            });
        });

    });

    document.getElementById('moveButton').addEventListener('click', function (event) {
        event.preventDefault(); // Menghentikan aksi default dari button jika ada

        const folderList = document.getElementById('folderList');
        const newFolderList = document.getElementById('newFolderList');

        const menuTitle = document.getElementById('menuTitle');
        // Memeriksa apakah menuTitle ada dan teksnya tidak kosong
        if (menuTitle && menuTitle.textContent.trim() !== "") {
            // Memeriksa apakah folderList memiliki anak
            if (folderList.childElementCount > 0) {
                // Pindahkan semua elemen dari folderList ke newFolderList
                while (folderList.firstChild) {
                    newFolderList.appendChild(folderList.firstChild);
                }
                // Mengubah teks tombol ke arah kiri (<-)
                this.innerHTML = '&larr; Move All';
            } else if (newFolderList.childElementCount > 0) {
                // Jika folderList kosong, pindahkan semua elemen dari newFolderList ke folderList
                while (newFolderList.firstChild) {
                    folderList.appendChild(newFolderList.firstChild);
                }
                // Mengubah teks tombol ke arah kanan (->)
                this.innerHTML = 'Move All &rarr;';
            }
        }
    });

    document.getElementById('searchMenu').addEventListener('input', function () {
        const searchValue = this.value.toLowerCase();
        const items = document.querySelectorAll('#folderList .nav-item');

        items.forEach(item => {
            const roleName = item.textContent.toLowerCase();
            if (roleName.includes(searchValue)) {
                item.style.display = ''; // Tampilkan item jika cocok dengan pencarian
            } else {
                item.style.display = 'none'; // Sembunyikan item jika tidak cocok
            }
        });
    });


</script>
